{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reflect Tables into SQLAlchemy ORM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can view all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Climate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('2017-08-23',)]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "engine.execute('SELECT max(date) FROM Measurement').fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results\n",
    "# Calculate the date 1 year ago from the last data point in the database\n",
    "# Perform a query to retrieve the data and precipitation scores\n",
    "precipt_data = session.query(Measurement.date, Measurement.prcp).filter(Measurement.date >= \"2016-08-24\").\\\n",
    "    filter(Measurement.date <= \"2017-08-23\").all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>precipitation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>1.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            precipitation\n",
       "date                     \n",
       "2016-08-24           0.08\n",
       "2016-08-24           2.15\n",
       "2016-08-24           2.28\n",
       "2016-08-24           2.15\n",
       "2016-08-24           1.45"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "precipt_df = pd.DataFrame(precipt_data).set_index('date')\n",
    "# Rename the column\n",
    "precipt_df=precipt_df.rename(columns={'prcp':'precipitation'})\n",
    "# Sort the dataframe by date\n",
    "precipt_df=precipt_df.sort_values(by='date').dropna()\n",
    "precipt_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jbhgu\\anaconda3\\envs\\PythonTest_1\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py:1192: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_xticklabels(xticklabels)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "precipt_df.plot(rot=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>precipitation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2015.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.176462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.460288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       precipitation\n",
       "count    2015.000000\n",
       "mean        0.176462\n",
       "std         0.460288\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.020000\n",
       "75%         0.130000\n",
       "max         6.700000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calcualte the summary statistics for the precipitation data\n",
    "precipt_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 9 stations available in this dateset.\n"
     ]
    }
   ],
   "source": [
    "# Design a query to show how many stations are available in this dataset?\n",
    "station_count = session.query(Station.id).count() \n",
    "print(f'There are {station_count} stations available in this dateset.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What are the most active stations? (i.e. what stations have the most rows)?\n",
    "# List the stations and the counts in descending order.\n",
    "station_activity = session.query(Measurement.station, func.count(Measurement.station)).\\\n",
    "group_by(Measurement.station).order_by(func.count(Measurement.station).desc()).all()\n",
    "station_activity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(54.0, 85.0, 71.66378066378067)]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using the station id from the previous query, calculate the lowest temperature recorded, \n",
    "# highest temperature recorded, and average temperature of the most active station?\n",
    "station_number = 'USC00519281'\n",
    "session.query(func.min(Measurement.tobs),\n",
    "              func.max(Measurement.tobs),\n",
    "              func.avg(Measurement.tobs)).filter(Measurement.station == station_number).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose the station with the highest number of temperature observations.\n",
    "station_highest_obs = station_activity[0][0]\n",
    "\n",
    "results = session.query(Measurement.date, Measurement.tobs).\\\n",
    "                        filter(Measurement.date >= \"2016-08-24\").\\\n",
    "                        filter(Measurement.date <= \"2017-08-23\").\\\n",
    "                        filter(Measurement.station == station_highest_obs).all()\n",
    "\n",
    "# convert to dataframe\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# historgram \n",
    "results_df.plot.hist(bins=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(62.0, 69.57142857142857, 74.0)]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "def calc_temps(start_date, end_date):\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVG, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    return session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()\n",
    "\n",
    "# function usage example\n",
    "print(calc_temps('2012-02-28', '2012-03-05'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(61.0, 69.75510204081633, 75.0)]\n"
     ]
    }
   ],
   "source": [
    "# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax \n",
    "# for your trip using the previous year's data for those same dates.\n",
    "print(calc_temps('2011-02-28', '2011-03-05'))\n",
    "tmin, tavg, tmax = calc_temps('2011-02-28', '2011-03-05')[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54.0, 85.0, 71.66378066378067)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sel = [func.min(Measurement.tobs),func.max(Measurement.tobs),func.avg(Measurement.tobs)]\n",
    "mostactivestationdata = session.query(*sel).\\\n",
    "    group_by(Measurement.station).\\\n",
    "    order_by(func.count(Measurement.id).desc()).first()\n",
    "mostactivestationdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jbhgu\\anaconda3\\envs\\PythonTest_1\\lib\\site-packages\\ipykernel_launcher.py:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  # Remove the CWD from sys.path while we load stuff.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n",
    "fig, ax = plt.subplots(figsize=plt.figaspect(2.))\n",
    "yerr = tmax-tmin\n",
    "ax.bar(1, tmax, yerr=yerr, alpha=0.5, color='red', align=\"center\")\n",
    "ax.set(xticks=range(1), xticklabels=\"a\", title=\"Avg Temp\", ylabel=\"Temp (F)\")\n",
    "ax.margins(.3, .3)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519523',\n",
       "  'WAIMANALO EXPERIMENTAL FARM, HI US',\n",
       "  21.33556,\n",
       "  -157.71139,\n",
       "  19.5),\n",
       " ('USC00519397', 'WAIKIKI 717.2, HI US', 21.2716, -157.8168, 3.0),\n",
       " ('USC00519281', 'WAIHEE 837.5, HI US', 21.45167, -157.84888999999998, 32.9),\n",
       " ('USC00516128', 'MANOA LYON ARBO 785.2, HI US', 21.3331, -157.8025, 152.4),\n",
       " ('USC00513117', 'KANEOHE 838.1, HI US', 21.4234, -157.8015, 14.6),\n",
       " ('USC00511918', 'HONOLULU OBSERVATORY 702.2, HI US', 21.3152, -157.9992, 0.9),\n",
       " ('USC00518838', 'UPPER WAHIAWA 874.3, HI US', 21.4992, -158.0111, 306.6),\n",
       " ('USC00517948', 'PEARL CITY, HI US', 21.3934, -157.9751, 11.9),\n",
       " ('USC00514830',\n",
       "  'KUALOA RANCH HEADQUARTERS 886.9, HI US',\n",
       "  21.5213,\n",
       "  -157.8374,\n",
       "  7.0)]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "session.query(Station.station,  Station.name, Station.latitude, Station.longitude, Station.elevation).\\\n",
    "   filter(Station.station == Measurement.station).\\\n",
    "       filter(Measurement.date >= '2011-02-28').filter(Measurement.date <= '2011-03-05').\\\n",
    "           group_by(Measurement.station).order_by(Measurement.prcp.desc()).all()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus Challenge Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "def calc_temps(start_date, end_date):\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    return session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()\n",
    "\n",
    "# function usage example\n",
    "print(calc_temps('2012-02-28', '2012-03-05'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax \n",
    "# for your trip using the previous year's data for those same dates.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a query that will calculate the daily normals \n",
    "# (i.e. the averages for tmin, tmax, and tavg for all historic data matching a specific month and day)\n",
    "\n",
    "def daily_normals(date):\n",
    "    \"\"\"Daily Normals.\n",
    "    \n",
    "    Args:\n",
    "        date (str): A date string in the format '%m-%d'\n",
    "        \n",
    "    Returns:\n",
    "        A list of tuples containing the daily normals, tmin, tavg, and tmax\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    return session.query(*sel).filter(func.strftime(\"%m-%d\", Measurement.date) == date).all()\n",
    "    \n",
    "daily_normals(\"01-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the daily normals for your trip\n",
    "# push each tuple of calculations into a list called `normals`\n",
    "\n",
    "# Set the start and end date of the trip\n",
    "\n",
    "# Use the start and end date to create a range of dates\n",
    "\n",
    "# Stip off the year and save a list of %m-%d strings\n",
    "\n",
    "# Loop through the list of %m-%d strings and calculate the normals for each date\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the previous query results into a Pandas DataFrame and add the `trip_dates` range as the `date` index\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the daily normals as an area plot with `stacked=False`\n"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  },
  "nteract": {
   "version": "0.12.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
